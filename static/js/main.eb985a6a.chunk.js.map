{"version":3,"sources":["components/TabPanel/index.tsx","hooks/useAsyncAction.ts","constants/apiConstants.ts","components/Chart/index.tsx","components/Chart/Chart.helpers.ts","pages/dashboard/helpers/home.ts","pages/dashboard/Home.tsx","pages/dashboard/hooks/useLiveData.ts","pages/dashboard/LiveChart.tsx","pages/dashboard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tab","route","name","to","className","activeStyle","fontWeight","backgroundColor","TabPanel","children","testId","data-testid","React","Children","map","child","props","type","fetchData","a","url","uri","options","fetch","response","ok","json","Error","statusText","OHLCChart","error","data","dataId","useStatePersist","localData","setLocalData","useEffect","length","chartData","dataItem","item","split","stringItem","Number","moment","format","slice","formatChartData","width","height","chartType","loader","legend","rootProps","defaultProps","getHistoricalData","Home","action","useState","loading","setLoading","setError","setData","useCallback","params","useAsyncAction","fetchHistoricalData","cleanUp","Chart","useLiveData","socket","io","on","console","log","emit","state","res","cb","prevState","LiveChart","Dashboard","path","component","App","basename","from","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.eb985a6a.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './index.css';\n\nexport interface ITabPanel {\n  testId?: string;\n  children: any;\n}\nexport interface ITab {\n  route: string;\n  name: string;\n}\n\nexport const Tab: React.FC<ITab> = ({ route, name }) => {\n  return (\n    <NavLink\n      to={route}\n      className=\"tab\"\n      activeStyle={{\n        fontWeight: 'bold',\n        backgroundColor: '#797979',\n      }}\n    >\n      {name}\n    </NavLink>\n  );\n};\n\nconst TabPanel: React.FC<ITabPanel> = ({ children, testId }) => {\n  return (\n    <div className=\"tab-panel\" data-testid={testId}>\n      <div className=\"tab-container\">\n        {React.Children.map(children, (child) => {\n          const { props, type } = child;\n          if (type === Tab) {\n            return <Tab {...props} />;\n          }\n          return null;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default TabPanel;\n","import { useState, useCallback } from 'react';\nimport { BASE_URL } from 'constants/apiConstants';\nimport { AsyncAction, FetchData, UseAsyncAction } from './index.interface';\n\nexport const useAsyncAction: UseAsyncAction = (action) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(null);\n\n  const callAsyncAction = useCallback(async (params: AsyncAction) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await action(params);\n      setData(response);\n    } catch (e) {\n      setError(e);\n    } finally {\n      setLoading(false);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const cleanUp = useCallback(() => {\n    setLoading(false);\n    setError(null);\n    setData(null);\n    // eslint-disable-next-line\n  }, []);\n\n  return [{ loading, data, error }, callAsyncAction, cleanUp];\n};\n\nexport const fetchData = async ({\n  url = BASE_URL,\n  uri,\n  options,\n}: FetchData) => {\n  const response = await fetch(url + uri, options);\n  if (response.ok) {\n    return response.json();\n  }\n  return new Error(response.statusText);\n};\n","export const BASE_URL = 'http://kaboom.rksv.net';\n","import React, { useEffect } from 'react';\nimport Chart from 'react-google-charts';\nimport { useStatePersist } from 'use-state-persist';\nimport { formatChartData } from './Chart.helpers';\n\nexport interface IChart {\n  error?: string;\n  data: string[];\n  testId?: string;\n  dataId: string;\n  loading?: boolean;\n}\n\nconst OHLCChart: React.FC<IChart> = (props) => {\n  const { error, data, testId, dataId } = props;\n  const [localData, setLocalData] = useStatePersist<any>(`@${dataId}`, []);\n  useEffect(() => {\n    if (data && data.length > 0) {\n      setLocalData(data);\n    }\n  }, [data, setLocalData]);\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n  if (!localData) {\n    return <div>Loading</div>;\n  }\n  const chartData = formatChartData(localData);\n  return (\n    <div className=\"chart-container\">\n      <Chart\n        width=\"100%\"\n        height={400}\n        chartType=\"CandlestickChart\"\n        loader={<div>Loading Chart</div>}\n        data={[['date', 'open', 'high', 'low', 'close'], ...chartData]}\n        options={{\n          legend: 'none',\n        }}\n        rootProps={{ 'data-testid': testId }}\n      />\n    </div>\n  );\n};\n\nOHLCChart.defaultProps = {\n  testId: 'stock-chart',\n};\n\nexport default OHLCChart;\n","import moment from 'moment';\n\nexport const formatChartData = (data: string[]) => {\n  return data.map((dataItem: string) => {\n    const item: number[] = dataItem\n      .split(',')\n      .map((stringItem) => Number(stringItem));\n    return [moment(item[0]).format('DD/MM/YYYY'), ...item.slice(1, 5)];\n  });\n};\n","import { fetchData } from 'hooks';\n\nexport const getHistoricalData = async () => {\n  return fetchData({ uri: '/api/historical' });\n};\n","import React, { useEffect } from 'react';\nimport { useAsyncAction } from 'hooks';\nimport Chart from 'components/Chart';\nimport { getHistoricalData } from './helpers/home';\n\nconst Home: React.FC<any> = () => {\n  const [\n    { data, error, loading },\n    fetchHistoricalData,\n    cleanUp,\n  ] = useAsyncAction(getHistoricalData);\n\n  useEffect(() => {\n    fetchHistoricalData();\n    return cleanUp;\n  }, [fetchHistoricalData, cleanUp]);\n\n  return <Chart data={data} error={error} dataId=\"home\" loading={loading} />;\n};\n\nexport default Home;\n","import io from 'socket.io-client';\nimport { BASE_URL } from 'constants/apiConstants';\nimport { useEffect, useState } from 'react';\n\nconst useLiveData = () => {\n  const [data, setData] = useState<any>([]);\n  const [error, setError] = useState<any>();\n\n  useEffect(() => {\n    const socket = io(`${BASE_URL}/watch`);\n    socket.on('connect', () => {\n      console.log('socket connected');\n    });\n    socket.on('disconnect', () => {\n      console.log('socket disconnected');\n    });\n    socket.emit('sub', { state: true });\n    socket.on('data', (res: string, cb: (ack: number) => void) => {\n      setData((prevState: any) => [...prevState, res]);\n      const CLIENT_ACKNOWLEDGEMENT = 1;\n      cb(CLIENT_ACKNOWLEDGEMENT);\n    });\n    socket.on('error', (res: string) => {\n      console.log('error', res);\n      setError(res);\n    });\n\n    return () => {\n      socket.emit('unsub', { state: false });\n    };\n  }, []);\n  return [data, error];\n};\n\nexport default useLiveData;\n","import React from 'react';\nimport Chart from 'components/Chart';\nimport useLiveData from './hooks/useLiveData';\n\nconst LiveChart: React.FC<any> = () => {\n  const [data, error] = useLiveData();\n\n  return <Chart data={data} error={error} dataId=\"live\" />;\n};\n\nexport default LiveChart;\n","import React from 'react';\nimport TabPanel, { Tab } from 'components/TabPanel';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport Home from './Home';\nimport LiveChart from './LiveChart';\nimport './index.css';\n\nconst Dashboard: React.FC<any> = () => {\n  return (\n    <div className=\"flex column flex-1\">\n      <TabPanel>\n        <Tab name=\"Home\" route=\"/dashboard/home\" />\n        <Tab name=\"Live Chart\" route=\"/dashboard/live-chart\" />\n      </TabPanel>\n      <Switch>\n        <Route path=\"/dashboard/home\" component={Home} />\n        <Route path=\"/dashboard/live-chart\" component={LiveChart} />\n        <Redirect to=\"/dashboard/home\" />\n      </Switch>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.css';\nimport Dashboard from 'pages/dashboard';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <main className=\"app\">\n      <HashRouter basename='/'>\n        <Switch>\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Redirect from=\"/\" to=\"dashboard\" exact />\n          <Route path=\"/*\" render={() => <div>Broken route</div>} />\n        </Switch>\n      </HashRouter>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}